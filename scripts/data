#!/usr/bin/env python

import configparser
from datetime import datetime
import os
import sys
import subprocess
from typing import Optional

class DataGetter:

    def __init__(self):
        self.get_config()

    def get_config(self) -> 'ConfigParser':
        """Parse a file using Python's INI config syntax"""
        config_file = os.environ.get('DATA_CONFIG', 'config.ini')
        config = configparser.ConfigParser()
        config.read(config_file)
        self.config = config

    def save_dump(self, app_conf: str) \
            -> bool:
        """Get an SQL dump from a host.

        Assumes that mysqldump is installed on remote host,
        and that an appropriate SSH config is installed locally.
        """
        app_conf = self.config[app_conf]
        host = app_conf.get('host', None)
        db = app_conf.get('db', None)
        user = app_conf.get('user', '')

        if host is None or db is None:
            sys.stderr.write('Config -- host: %s, database: %s' % (host, db))
            return False

        try:
            result = subprocess.run(
                ['ssh', ('%s@%s' % (user, host)).strip('@'), 'mysqldump', '--opt', '%s' % db],
                check=True,
                stdout=subprocess.PIPE
            )
        except subprocess.CalledProcessError as err:
            sys.stderr.write('Error dumping SQL from %s: %s' \
                % (host, err))
            return False
        filename = '%s-%s.sql' \
            % (datetime.now().astimezone().strftime('%Y-%m-%d'), db)
        # expand shell vars and user dir ~
        storage_dir = os.path.expanduser(
            os.path.expandvars(app_conf.get('StorageDir', '.')
            ))
        try:
            file_path = os.path.join(storage_dir, filename)
            with open(file_path, 'wb') as dump:
                dump.write(result.stdout)
        except IOError as err:
            sys.stderr.write('Error dumping to')
        return True

if __name__ == '__main__':
    getter = DataGetter()
